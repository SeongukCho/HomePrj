현재 스프링부트 정리한거 공유합니다.
어차피 절대평가인 만큼 다 같이 잘 보았으면 하는 마음에 공유해요.
아 물론 제가 주고 싶은 사람만..
공유 절대 xx;

우선 간단하게 생각하고 넘어가면 이후 공부할 때 편할거에요. 
설명 들어갑니다.

우리는 무언가 프로그램을 실행시키기 위한 Main 클래스를 하나 작성해요.
현재 저희가 실습에 했던 Main 클래스는 AiJavaApplication 인거에요.

Main 클래스에서는 실행할 동작들을 써놓게 되고 
그 동작에 대한 기능들은 라이브러리 혹은 클래스참조, 부모로 부터 상속을 받을겁니다.

메인 클래스에 코드를 적게 쓰기 위해 다른 파일들을 만들기 시작하는데, 
rDTO , 인터페이스 , 인터페이스의 기능을 담당하는 클래스파일.
총 3개를 더 만들었어요.
-----------------------------------------------------
우선 DTO 입니다.
저는 OCR(이미지 광학 인식) 을 예로 들어볼게요.
저희가 처음 실습했던 문자열 추출 입니다.

클래스 파일과 인터페이스 파일의 가장 큰 차이는 
클래스 파일은 하나만 상속 받을 수 있지만
인터페이스 파일은 여러개를 한번에 상속 받을 수 있다는 점이에요. 

그래서 DTO 는 클래스 파일입니다.
하나만 상속 받을 수 있기 때문에 해당 메인에 필요한 것만 담아야해요.

그래서 OcrDTO 에는 자주 쓰는 변수명을 저장할 겁니다.

private String filePath;    // 저장된 이미지 파일의 파일 저장 경로

private String fileName;    // 저장된 이미지 파일 이름

private String result;    

애네 셋이 주인공이에요.

Main 클래스에서는 OcrDTO.setfilePath 혹은 OcrDTO.getfilePath 처럼
필요할 때마다 불러서 변수를 넣고 꺼내고 할거에요.

자주 쓰는 변수를 Main 클래스에서 계속 쓰기 싫어서 저렇게 잡아요.
붕어빵 틀 입니다.
OcrDTO 를 하나 잡음으로써 여러 이미지를 받아 추출해도 OcrDTO 의 변수들은 똑같으니까
그냥 사용하면 되요.
예시 하나만 더 씁니다.

private String car;    // 자동차 이름

private String speed;    // 속력

private String Color;  // 색  

이제 이해가 쉽죠?
여러 차를 뽑을 때 저렇게 객체구조의 클래스를 만들어놓으면 여러번 쓸 때 편해요.

-----------------------------------------------------

인터페이스는 다중상속이 가능하다고 했어요.
저희는 인터페이스를 쓸 때 변수나 메소드를 저장하고 쓰게 되는데,
인터페이스는 기본값이 final 이기에 초기값을 설정하는 순간 변경할 수가 없어요.
그래서 정말 필요한 것만을 인터페이스에 넣습니다.

IOcrService 라는 인터페이스 에서는 단 두가지 만을 넣어놨어요.

    String modelFile = "C:\\model\\tessdata";

    OcrDTO getReadforImageText(OcrDTO pDTO) throws Exception;

이 두 친구가 주인공 입니다.

modeFile 은 모델파일의 경로를 저장하여 변경할 수 없게 하였어요.
초기값을 지정했기에 modelFile 은 해당 값으로 쭉 갑니다.
실행 이후에는 변경이 안되고 변경 하려면 실행을 모두 멈추고 컴파일을 통해 다시 수정해서 실행해야해요.

OcrDTO getReadforImageText(OcrDTO pDTO) 이 친구를 설명해볼게요.

이 친구는 [ OcrDTO 데이터 타입 ] 의 [ 메소드 getReadforImageText() ] 이에요.
데이터 타입이 OcrDTO 라고 하니 이해가 안되겠지만  
OcrDTO 객체를 나타내는 나타내는 데이터 타입으로 이후에 설명할 OcrDTO 클래스를 참조하게 해요.
설명은 나중에 또 하겠습니다.

String modelFile = "C:\\model\\tessdata"; 

에서는 주소값을 지정하여 바꿀 수 없는 상수값으로 표현했어요. (final 값이 기본. 생략된 것임)

< ----		---->
 
OcrDTO getReadforImageText(OcrDTO pDTO) throws Exception; 

에서는 기능을 뜻하는 메소드를 저장한 겁니다.

저희는 OCR(이미지 광학 인식)을 통해 이미지의 문자를 추출하는 프로그램을 만드려고 해요.
해당 프로그램이 이미지에서 문자를 추출하는 '기능' 을 인터페이스에 저장하여 넣고 계속해서 사용하는 겁니다.

계속 말하지만 코드가 길어지는게 싫어서 반복되는 과정을 부모 클래스나 인터페이스에 넣고 상속 받아
여러번 써도 코드가 반복되지 않게하는 코드 중복을 줄이기 위해 사용하는거에요.   

그래서 기능에 대한 설명을 해야겠죠.

위에서도 말했지만 OcrDTO 는 OcrDTO 객체를 나타내는 데이터타입이고
getReadforImageText() 메서드는 어떤 기능을 뜻하는 메소드에요.

우리는 인터페이스에 
    OcrDTO getReadforImageText(OcrDTO pDTO) throws Exception;
이렇게 기능이 있다고 작성만 해놓고 기능에 대한 행동을 지정하진 않을겁니다.
(지정하면 수정이 안됨)

그럼 기능에 대한 행동을 어딘가에 명시해야겠죠?
그게 OcrService 입니다.

-----------------------------------------------------

OcrService 클래스는 작동을 위한 기능을 넣기 위해 만들었어요.

IOcrService 인터페이스에서 어떠한 기능을 만들 것인지 명시하였고
OcrService 클래스에서 그 기능이 무엇인지를 설명할 것이기 때문에
OcrService 는 IOcrService 에 종속인 상태입니다.

그렇기에 인터페이스를 클래스가 상속 받는  

public class OcrService implements IOcrService 

implements 상태입니다.

우리는 여기에서 부모인 인터페이스로부터 메서드 getReadforImageText(OcrDTO pDTO) throws Exception 를 상속 받아서
Override 를 통해 원하는 내용으로 바꿀 겁니다.

그래서 해당 코드를 보시면 이제 이해가 가실거에요.
왜 파일을 나눠서 프로그램을 짠 것인지.

return 값은 pDTO 를 주었어요.
그 이유는 해당 메소드의 데이터타입이 OcrDTO 이기 때문입니다.
OcrDTO 클래스에 getReadforImageText(OcrDTO pDTO) 메소드의 매개변수 pDTO 를 준거에요.
(OcrDTO pDTO) 는 OcrDTO 를 pDTO 가 참조하고 있다는 뜻입니다.

-----------------------------------------------------

아무튼 이렇게 해서 저희는 메인 클래스를 통해 이미지에서 문자열을 추출하는 프로그램을 만들어봤어요.

정리하자면 

하나의 프로그램을 만들기 위해서 대충 머리를 짜보니
① 메인 클래스가 있어야했고,
② 이미지 추출 프로그램은 한번만 쓸 것이 아니기에 부모 클래스를 만들어 변수를 저장했어요.
③ 이미지 추출 프로그램의 기능을 메인에 쓰려고 하니 너무 길어 가독성이 안 좋아 따로 빼기로 했습니다.
④ 기능은 한가지만 있지 않을 수도 있으니 인터페이스에 넣기로 했어요. 인터페이스는 다중상속이 되니 기능 여러개를 합쳐서 클래스에 상속시킬 수 있거든요.
⑤ 인터페이스는 기본 값이 final 이라 한번 지정하면 수정하지 못해요. 그래서 수정하면 안되는 이미지 추출 model 의 주소값은 지정을 해주었고, 기능은 혹시나 문제나 추가할 사항이 있을 수 있으니 기능명을 지정만 해놓고 기능을 서술하진 않았어요.
⑥ 기능의 상세한 내용은 Class에 쓰기로 했어요. Class에 쓰면 수정이 되니까요. 대신 인터페이스의 기능 메소드를 참조하여 거기에 내용을 추가하는 방식으로 만들거에요. 그래서 클래스는 인터페이스에 종속된 상태입니다. (public class OcrService implements IOcrService)
⑦ 이제 다 했어요. 메인 클래스에 지금까지 작성한 기능(Service = 인터페이스 + 클래스)과 틀(DTO = 붕어빨 틀) 을 활용하여 내가 만들고자 하는 프로그램을 완성해요.
⑧ 이제 메인 클래스에서 이미지 경로(OcrDTO에 저장한 filePath) 와 이미지 이름(OcrDTO에 저장한 fileName) 만 수정하면 원하는 이미지의 문자열을 추출할 수 있게 되었어요!

** 중요 **
1. 인터페이스는 여러부모 가능 (다중상속) . 클래스는 한명의 부모만 가능
2. DTO 에는 자주 쓰는 자동차의 이름, 속도, 색 과 같은 변수명을 지정함. (DTO 변수만 수정하면 다 수정이 되니까)
3. Service는 프로그램의 기능을 작성하기 위해 만든 것임.
4. 부모 클래스 -> 자식 클래스 ==> Extends ,  부모 인터페이스 -> 자식 클래스 ==> implements.