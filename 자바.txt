1. List와 Set 데이터 구조의 차이점을 2가지를 설명하시오. 


(1) List는 데이터의 순서가 보장되고 중복을 허용한다.
(2) Set은 데이터의 순서가 보장되지 않고 중복을 허용하지 않는다.


2. 컬렉션 프레임워크를 활용하여 다음과 같은 숫자를 저장하고,
가나다 순으로 출력하는 프로그래밍 코드를 작성하시오. 
- 출력을 위한 반복문은 람다식으로 구현하시오. 

입력값 : 5, 3, 6, 1, 2, 4 
출력값 : 1, 2, 3, 4, 5, 6 

import java.util.*;

public class Exam {
	public static void main(String[] args) {
		ArrayList<Integer> list = new ArrayList<Integer>(Arrays.asList(5,3,6,1,2,4));

		Collections.sort(list);

		list.forEach(num -> System.out.print(num + " ");


3. Parent 객체에 정의된 cal 함수의 내용을 재정의하는 자식객체 및 함수에 대해
	프로그래밍 코드를 작성하시오. 

public class Parent{ 

public int cal(int a, int b){ 
return a + b; 
} 
} 

수정내용 : a + b => a * b

-----------------------------------------
public class Child extends Parent {

	@Override
	public int cal(int a, int b){
		return a * b;
	}
}


4. 인스턴스와 객체에 대해 설명하시오. 


(1) 인스턴스 : 현실의 객체를 클래스를 통해 소프트웨어 내에서 구현하여 메모리에 할당된 실체
(2) 객체 : 물리적으로 존재하거나 추상적으로 생각할 수 있는것 중에서
	자신의 속성을 가지고 다른 것과 식별 가능한 것


5. 오버로딩 예를 프로그래밍 코드로 작성하시오. 


class OverloadingTest {
	void add(int a, int b) {
		System.out.println(a + b);
	}
	void add(int a, int b, int c) {
		System.out.println(a + b + c);
	}
	void add(int a, double b) {
		System.out.println(a + b);
	}



6. @Service 어노테이션에 대해 자세히 설명하시오. 

해당 클래스가 비즈니스 로직을 담당하는 Service 클래스임을 나타내는 역할
@Service 어노테이션을 클래스에 적용함으로써 해당 클래스는 스프링의 컴포넌트 스캔에 의해 스프링 컨테이너에 빈(Bean)으로 등록된다.
즉 @Service 어노테이션이 붙은 클래스는 스프링에 의해 객체의 인스턴스가 생성되고 관리되는 서비스 빈이 됩니다.


7. @Mapper 어노테이션에 대해 자세히 설명하시오. 


Mapper 인터페이스는 Mapping 파일에 기재된 SQL을 호출하기 위한 인터페이스이다.


8. SQL 언어를 XML 파일에 작성하여, 소프트웨어의 유지보수를 쉽게 하기 개발된 오픈소스 프레임워크는 무엇인가? 


myBatis


9. Lombok 외부 라이브러리에 대해 자세히 설명하시오. 


Java 개발자들이 일상적으로 작성해야하는 반복적이고 번거로운 코드를 자동으로 생성해주는 외부 라이브러리
1. @Getter 및 @Setter 어노테이션을 사용하여 필드에 대한 Getter와 Setter 메소드를 자동으로 생성
 - 이를 통해 반복적인 Getter와 Setter 메소드를 직접 작성할 필요 없이 간단하게 접근할 수 있습니다.

2. @NoArgsConstructor, @RequiredArgsConstructor, @AllArgsConstructor 어노테이션을 사용
 - 이를 통해 인자에 따라 기본 생성자나 필수 인자를 포함한 생성자를 자동으로 생성

3. @ToString 어노테이션을 사용하여 자동으로 toString() 메소드를 생성
 - 이를 통해 객체의 내용을 간편하게 확인할 수 있습니다.

4. @EqualsAndHashCode 어노테이션을 사용하여 자동으로 equals(),hashCode() 메소드를 자동으로 생성
 - 이를 통해 객체의 동등성 비교 및 해시 연산을 편리하게 처리할 수 있습니다.

5. @Cleanup 어노테이션을 사용하여 자동으로 리소스를 해제하는 코드를 생성
 - 주로 입출력 스트림, 데이터베이스 연결 등의 자원을 사용할 때 유용합니다.

6. @Value 어노테이션을 사용하여 불변(immutable) 객체를 생성
 - 불변 객체는 필드 값을 변경할 수 없으므로 안전하게 공유 및 사용할 수 있습니다.


10. JDBC에 대해 자세히 설명하시오. 


JDBC는 자바 언어를 사용하여 관계형 데이터베이스에 접속하고 상호작용하기 위한 자바 API입니다.
JDBC는 데이터베이스와의 연결, 쿼리 실행, 결과 처리 등을 위한 인터페이스와 클래스를 제공하여
개발자가 데이터베이스에 대한 접근을 쉽게 할 수 있도록 도와줍니다.


11. DTO에 다음과 같이 정의된 변수에 @Setter 어노테이션을 작성하면, 어떤 함수가 자동으로 생성되는가? 
private String user_id; 


public void setUser_id(String user_id) {
	this.user_id = user_id;
}


12. DTO에 다음과 같이 정의된 변수에 @Getter 어노테이션을 작성하면, 어떤 함수가 자동으로 생성되는가? 
private String user_id; 


public String getUser_id() {
	return user_id;
}


13. @RequiredArgsConstructor 어노테이션에 대해 자세히 설명하시오. 


Lombok에서 제공하는 어노테이션 중 하나로, 해당 클래스의 필드들을 기반으로 생성자를 자동으로 생성해주는 기능을 제공합니다.
이 어노테이션을 사용하면 필드를 선언할 때 초기화할 수 있는 final 필드를 가진 생성자를 자동으로 생성할 수 있습니다.
@RequiredArgsConstructor 어노테이션은 주로 불변 객체(Immutable Object)를 생성하는 데 유용하게 사용됩니다.
final로 선언된 필드들을 가진 불변 객체를 생성하려면 해당 필드들을 초기화하는 생성자가 필요한데,
@RequiredArgsConstructor 어노테이션을 사용하면 이를 간단하게 처리할 수 있습니다.



14. @Slf4j 어노테이션에 대해 자세히 설명하시오. 


logging 관련 라이브러리는 다양하다.
SLF4J는 이러한 라이브러리들을 하나의 통일된 방식으로 사용할 수 있는 방법을 제공한다.
SLF4J는 로깅 Facade이다.
로깅에 대한 추상 레이어를 제공하는 것이고 interface의 모음이다.


15. 스프링 부트 프레임워크 주요 환경설정을 정의하는 파일명은 무엇인가? 


application.properties


16. 자바 외부 라이브러리를 자동으로 다운로드 및 프로젝트 자동 반영시켜는 도구의 이름과 설정 파일명을 작성하시오. 


- 빌드 도구 : Maven
- 설정 파일 : pom.xml


17. 다음과 같은 테이블에 데이터를 저장하기 위한 SQL 코드를 작성하시오. 
테이블명 : Member 
USER_ID / VARCHAR(100) / PK 
USER_NAME / VARCHAR(100) 
AGE / INT 
EMAIL / INT 

----------------------------------------------------------
INSERT INTO MEMBER
	(USER_ID, USER_NAME, AGE, EMAIL)
VALUES (#{userId},#{userName},#{age},#{email});
----------------------------------------------------------

18. 다음과 같은 테이블에 데이터를 수정하기 위한 SQL 코드를 작성하시오. 
테이블명 : Member 
USER_ID / VARCHAR(100) / PK 
USER_NAME / VARCHAR(100) 
AGE / INT 
EMAIL / INT 

수정할 값 
EMAIL : hglee67@kopo.ac.kr 
AGE : 100 

수정 조건 
USER_ID : hglee67 

----------------------------------------------------------
UPDATE	MEMBER
SET	AGE = 100,
	EMAIL = 'hglee67@kopo.ac.kr',
WHERE	USER_ID = 'hglee67';
----------------------------------------------------------

19. 다음과 같은 테이블에 데이터를 삭제하기 위한 SQL 코드를 작성하시오. 
테이블명 : Member 
USER_ID / VARCHAR(100) / PK 
USER_NAME / VARCHAR(100) 
AGE / INT 
EMAIL / INT 

삭제 조건 
USER_ID : hglee67 
----------------------------------------------------------
DELETE 
FROM MEMBER
WHERE USER_ID = 'hglee67';
----------------------------------------------------------
20. 다음과 같은 테이블에 데이터를 조회하기 위한 SQL 코드를 작성하시오. 
테이블명 : Member 
USER_ID / VARCHAR(100) / PK 
USER_NAME / VARCHAR(100) 
AGE / INT 
EMAIL / INT 

조회 조건 : 나이가 100살 이상이고, EMAIL 주소가 @kopo.ac.kr 도메인 주소인 사람 
----------------------------------------------------------
SELECT *
FROM MEMBER
WHERE AGE >= 100 AND EMAIL LIKE '%@kopo.ac.kr';
----------------------------------------------------------

21. 기본키와 유니크키의 차이점을 설명하시오. 

--------------------------------------------------------------------------------------
기본키와 유니크키는 둘다 중복을 허용하지만
유니크키는 여러열에 지정이 가능하고 NULL값을 허용하는 반면
기본키는 한열에만 지정이 가능하고 NULL값을 허용하지 않는다는 차이점이 있습니다.
--------------------------------------------------------------------------------------

22. XML의 resultType에 매칭되는 Mapper 인터페이스 정의된 함수의 어디인가? 

--------------------------------------------------------------------------------------
DTO
--------------------------------------------------------------------------------------

23. XML의 parameterType에 매칭되는 Mapper 인터페이스 정의된 함수의 어디인가? 

--------------------------------------------------------------------------------------
DTO
--------------------------------------------------------------------------------------

24. XML의 id에 매칭되는 Mapper 인터페이스 정의된 함수의 어디인가? 

--------------------------------------------------------------------------------------
Mapper 인터페이스
--------------------------------------------------------------------------------------

25. 싱글톤 패턴에 대해 설명하고, Spring Frameworks의 싱글톤 패턴이 적용된 객체와 프로그래밍 코드의 예를 작성하시오. 

--------------------------------------------------------------------------------------
생성자가 여러 차례 호출되더라도 실제로 생성되는 객체는 하나이며 이후에 호출된 생성자는 최초의 생성자가 생성한 객체를 리턴한다.
--------------------------------------------------------------------------------------