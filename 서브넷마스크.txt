IP주소는 (네트워크 주소) + (호스트 주소)로 이뤄져있음

IP 주소는 __________ . __________ . __________ . __________ 형태로 이뤄져있음.
	     8	      8	       8	         8
서브넷마스크 => IP 주소에서 어디까지가 네트워크 주소인것을 알려주는것
네트워크 주소가 차지할수 있는 공간을 서브넷마스크라 함.
앞에 3개를 네트워크 주소라 하면 서브넷마스크는 24가됨.
IP주소/24로 표기함.
=> (IP주소/서브넷마스크)로 표기

------------------------------------------------------------------------------------------

비행기의 좌석 클래스 처럼 갈수록 네트워크 주소가 쓸수 있는 공간이 넓어짐.

A Class	___________ . ____________ . ___________ . ____________
          (네트워크주소)|<---------   (host 주소)  ----------->|
=> 앞에 한칸만 네트워크 주소, 뒤에 2칸 host 주소
=> 네트워크 주소의 맨앞자리를 0(2진수)으로 고정. 0~127만 표현가능. ex)0xxxxxxxx.~
=> 서브넷마스크가 8로 고정됨.

B Class	___________ . ____________ . ___________ . ____________
	|<-- (네트워크 주소)	-->| |<---- (host 주소) ---->|
=> 앞에 두칸 네트워크 주소, 뒤에 두칸 host 주소
=> 네트워크 주소의 맨앞자리를 10(2진수)으로 고정. 128~191까지 표현가능. ex)10xxxxxxx.~
=> 서브넷마스크가 16으로 고정됨.

C Class	___________ . ____________ . ___________ . ____________
	|<------    (네트워크 주소)   ------>| |(host 주소)|
=> 앞에 세칸 네트워크 주소, 뒤에 한칸만 host 주소
=> 네트워크 주소의 맨 앞자리를 11(2진수)로 고정. 192~255까지 표현가능. ex)11xxxxxxx.~
=> 서브넷마스크가 24로 고정됨.


서브넷마스크가 고정되다 보니 누구는 부족하고 누구는 남아도는 현상이 발생.
이를 해결하기 위해 나온것이 CIDR임.
=> 호스트 주소가 6자리의 2진수로 표현이 가능하다면 네트워크 주소를 쓸수 있는 공간은
26자리가 됨. 이 경우에는 IP주소/26으로 표기함 (서브넷마스크 => 26)

EX) 192.168.0.x / 24 라는 IP가 있을때
A그룹에 128, B그룹에 64, C그룹에 32를 할당해야한다고 하면
A그룹의 경우 x => 0???????로 x의 첫자리가 0으로 고정된다. 이 경우 고정된 x의 첫자리를
네트워크 주소로 넘겨 서브넷마스크를 25로 처리한다.
A그룹의 IP주소는 192.168.0.0/25로 표기할 수 있다.

B그룹의 경우 A그룹이 첫자리가 0인 주소를 모두 사용했으므로, 첫자리를 1로 고정한다.
B그룹은 64개의 주소를 받아야함으로 x => 10??????로 첫 두자리가 10으로 고정된다.
B그룹의 IP주소는 192.168.0.128/26로 표기할 수 있다. 
여기서 host주소인 128은 주소의 맨 낮은 숫자인 10000000(2진수)이 된다.


C그룹의 경우 A, B그룹에 의해 첫 두자리가 모두 11로 고정된다.
C그룹은 32개의 주소를 받아야함으로 x => 110?????로 첫 세자리가 110으로 고정된다.
C그룹의 IP주소는 192.168.0.192/27로 표기할 수 있다.


10.10.0.0 / 16
네트워크 둘 / 호스트 둘 		4096개의 ip필요 4096 = 2^12
A팀 => 1024개	B팀 => 512개	C팀 => 1024개

할당받아야하는 주소 개수가 많은 곳 부터 줘야한다. A -> C -> B순으로 줘야함.
4096이 2^12이므로 10.10.0.0 / 20을 사용 (32 - 12)

A팀 => 1024개		10.10.0.0/22 => _______ . _______ . 00000000 . 00000000
A1 => 128개 	10.10.0.0/25 (128 = 2^7 => 32-7 = 25)
A2 => "		10.10.0.128/25
A3 => "		10.10.1.0/25
A4 => "		10.10.1.128/25
A5 => "		10.10.2.0/25
A6 => "		10.10.2.128/25

B팀 => 512개		10.10.8.0/23 => _______ . _______ . 00001000 . 00000000
B1 => 64개	10.10.8.0/26 (64 = 2^6 => 32-6 = 26)
B2 => 64개 	10.10.8.64/26
B3 => "		10.10.8.128/26
B4 => "		10.10.8.192/26
B5 => "		10.10.9.0/26
B6 => "		10.10.9.64/26
B7 => "		10.10.9.128/26
B8 => "		10.10.9.192/26

C팀 => 1024개		10.10.4.0/22 => _______ . _______ . 00000100 . 00000000
C1 => 128개	10.10.4.0/25 (128 = 2^7 => 32-7 = 25)
C2 => "		10.10.4.128/25
C3 => "		10.10.5.0/25
C4 => "		10.10.5.128/25
C5 => "		10.10.6.0/25
C6 => "		10.10.6.128/25
C7 => "		10.10.7.0/25


